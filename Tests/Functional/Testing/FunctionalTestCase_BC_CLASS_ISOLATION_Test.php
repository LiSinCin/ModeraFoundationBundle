<?php
namespace Modera\FoundationBundle\Tests\Functional\Testing;

use Modera\FoundationBundle\Testing\FunctionalTestCase;
/**
 * Here will be tested basic FunctionTestCase backward compatibility behavior.
 *
 * Default isolation level is CLASS
 * Transaction started
 *
 * @author    Alex Plaksin <alex.plaksin@modera.net>
 * @copyright 2015 Modera Foundation
 */
class FunctionalTestCase_BC_CLASS_ISOLATION_Test extends FunctionalTestCase
{
    /**
     * @var int
     */
    static private $setUpRunIterator = 0;

    static private $tearDownIterator = 0;

    static private $transactionStartedIterator = 0;

    static private $transactionRollbackIterator = 0;

    static private $setUpBeforeClassIterator = 0;

    static private $initRunIterator = 0;

    /**
     * Checking:
     * - transaction is started
     * - doTearDown = 0
     * - doSetup = 1
     *
     */
    function testOne()
    {
        $this->assertEquals(1, static::$transactionStartedIterator);
        $this->assertEquals(0, static::$transactionRollbackIterator);
        $this->assertEquals(0, static::$tearDownIterator);
        $this->assertEquals(1, static::$setUpRunIterator);
        $this->assertEquals(1, static::$setUpBeforeClassIterator);
        $this->assertEquals(1, static::$initRunIterator);
        $this->assertEquals(static::IM_CLASS, $this->getIsolationLevel());
        $this->assertInstanceOf('Symfony\Component\HttpKernel\KernelInterface', static::$kernel);
        $this->assertInstanceOf('Doctrine\ORM\EntityManager', static::$em);

    }

    function testTwo()
    {
        $this->assertEquals(1, static::$transactionStartedIterator);
        $this->assertEquals(0, static::$transactionRollbackIterator);
        $this->assertEquals(1, static::$tearDownIterator);
        $this->assertEquals(2, static::$setUpRunIterator);
        $this->assertEquals(1, static::$setUpBeforeClassIterator);
        $this->assertEquals(1, static::$initRunIterator);
    }

    function testThree()
    {
        $this->assertEquals(1, static::$transactionStartedIterator);
        $this->assertEquals(0, static::$transactionRollbackIterator);
        $this->assertEquals(2, static::$tearDownIterator);
        $this->assertEquals(3, static::$setUpRunIterator);
        $this->assertEquals(1, static::$setUpBeforeClassIterator);
        $this->assertEquals(1, static::$initRunIterator);
    }

    /**
     * Overriding template method to test Case execution
     */
    public function doSetUp()
    {
        static::$setUpRunIterator++;
    }

    /**
     * Overriding template method to test Case execution
     */
    public function doTearDown()
    {
        static::$tearDownIterator++;
    }

    static protected function makeTransactionStartDecision()
    {
        static::$transactionStartedIterator++;
    }

    static protected function rollbackTransaction()
    {
        static::$transactionRollbackIterator++;
    }

    static public function doSetupBeforeClass()
    {
        static::$setUpBeforeClassIterator++;
    }

    static public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        static::$initRunIterator++;
    }

    static protected function getIsolationLevel()
    {
        return static::IM_CLASS;
    }

}
